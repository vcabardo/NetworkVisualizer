<html lang="en">
  <head>
    <title>Network</title>
    <script
      type="text/javascript",
      src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"
    ></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> Document </title>
    <link rel="stylesheet" href="styles/style.css">
    <script src="http://localhost:3000/socket.io/socket.io.js"></script>
  </head>
  <body>
    <%- include("../partials/header.ejs") %>
    <div class="container-fluid">
      <div class="row min-vh-100">
        <div class="col-1 sidebar">
          <%- include("../partials/navbar.ejs") %>
        </div>

        <div class="col-11 content bg-gradient">
          <div class="row">
            <nav class="navbar navbar-expand-md navbar-light bg-light d-flex justify-content-around">
              <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
              data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
              aria-expanded="true">
                <span class="navbar-toggler-icon"></span>
              </button>

              <div class="collapse navbar-collapse d-flex justify-content-around" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto">
                  <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="navbarDropdown"
                    role="button" data-bs-toggle="dropdown" aria-haspopup="true"
                    aria-expanded="true">
                      All Graphs
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                      <% for(graph of graphs) { %>
                          <a class="dropdown-item" onclick="fetchGraph(&quot;<%= graph.name %>&quot;)">
                              <%= graph.name %>
                          </a>
                      <% } %>
                    </div>
                  </li>
                </ul>

                <div class="navbar-nav me-auto">
                  <h6>Rename graph:</h6>
                  <input id="graph-name" value="">
                  <input type="button" value="Save Graph" id="saveGraphButton" onclick="saveGraph()">
                  <input type="button" value="Download Graph" id="downloadGraphButton" onclick="downloadGraph()">
                </div>

                <form class="mr-auto">
                  <input id="searchbar" class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                  <button class="btn btn-outline-success my-2 my-sm-0" type="button" onclick="search()">Search Graphs</button>
                </form>
              </div>
            </nav>
          </div>


          <div class="row d-flex justify-content-center">
            <div id="mynetwork"></div>
            <div id="network-popUp" style="display: none;">
              <span id="operation">Edit Node</span> <br>
              <div id="nodeEdit" style="display: none;">
              <table style="margin: auto">
                <tbody><tr>
                  <td>id</td>
                  <td><input id="node-id" value="new value"></td>
                </tr>
                <tr>
                  <td>label</td>
                  <td><input id="node-label" value="new value"></td>
                </tr>
              </tbody></table>
              </div>
              <div id="edgeEdit" style="display: none;">
                <span id="edge-to">To: </span> <br>
                <span id="edge-from">From: </span> <br>
              <table style="margin: auto;">
                <tbody>
                <tr>
                  <td>Size Value</td>
                  <td><input id="edge-value" value="new value"></td>
                </tr>
              </tbody></table>
            </div>
              <input type="button" value="save" id="saveButton">
              <input type="button" value="cancel" id="cancelButton">
            </div>
          </div>
        </div>
      </div>
    </div>

    <script type="text/javascript">
      var nodes = []
      var edges =[]
      var nodeType1=[]
      var nodeType2=[]
      var graphName = ''
      var deleted = []

      var count = nodes.length;
      // create an array with nodes
      nodes = new vis.DataSet(nodes);

      // create an array with edges
      edges = new vis.DataSet(edges);

      // create a network
      var container = document.getElementById("mynetwork");

      var data = {
        nodes: nodes,
        edges: edges,
      };

      var options = {
        manipulation: {
          addNode: function(nodeData,callback) {
            nodeData.id = count;
            nodeData.label = 'Node'+count;
            count += 1;
            callback(nodeData);
            saveGraph();
          },
          editNode: function(nodeData,callback) {
            document.getElementById("operation").innerText = "Edit Node";
            document.getElementById("node-id").value = nodeData.id;
            document.getElementById("node-label").value = nodeData.label;
            document.getElementById("saveButton").onclick = saveNodeData.bind(
              this,
              nodeData,
              callback
            );
            document.getElementById("cancelButton").onclick = cancelEdit.bind(
              this,
              callback
            );
            document.getElementById("network-popUp").style.display = "block";
            document.getElementById("nodeEdit").style.display = "block";
          },
          deleteNode: function(nodeData,callback){
            deleted.push(nodeData.nodes[0]);
            callback(nodeData);
            saveGraph();

          },
          addEdge: function(edgeData,callback) {
            if (edgeData.from !== edgeData.to) {
              edgeData.value = 1
              callback(edgeData);
              saveGraph();
            }
          },
          editEdge: function(edgeData,callback) {
            if (edgeData.from !== edgeData.to) {              
              document.getElementById("operation").innerText = "Edit Edge";
              document.getElementById("edge-to").innerText = "To: "+edgeData.to;
              document.getElementById("edge-from").innerText = "From: "+edgeData.from;
              document.getElementById("edge-value").value = "Enter value";

              document.getElementById("saveButton").onclick = saveEdgeData.bind(
                this,
                edgeData,
                callback
              );
              document.getElementById("cancelButton").onclick = cancelEdit.bind(
                this,
                callback
              );
              document.getElementById("network-popUp").style.display = "block";
              document.getElementById("edgeEdit").style.display = "block";
            }
          },
          deleteEdge: function(edgeData,callback){
            callback(edgeData);
            saveGraph();

          }
      },

      layout: {
        randomSeed: 5
      },

      physics: false
      };

      var network = new vis.Network(container, data, options);
      network.on("dragEnd", function (params) {
        if(params.nodes > 0){
          saveGraph();

        }
      });
      network.stabilize();



      function clearPopUp() {
        document.getElementById("saveButton").onclick = null;
        document.getElementById("cancelButton").onclick = null;
        document.getElementById("network-popUp").style.display = "none";
        document.getElementById("nodeEdit").style.display = "none";
        document.getElementById("edgeEdit").style.display = "none";
      }

      function cancelEdit(callback) {
        clearPopUp();
        callback(null);
      }

      function saveNodeData(data, callback) {
        data.id = document.getElementById("node-id").value;
        data.label = document.getElementById("node-label").value;
        //nodes.add({id: data.id, label: data.label})
        clearPopUp();
        callback(data);
        saveGraph();
      }
      function saveEdgeData(data, callback) {
        data.value = document.getElementById("edge-value").value;
        clearPopUp();
        callback(data);
        saveGraph();
      }
      function saveGraph() {
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "graphs", true);
        xhr.setRequestHeader("Content-type", "application/json");
        xhr.onreadystatechange = function(){
          var elem = document.getElementById("Response");
          if (this.readyState == 4 && this.status == 200) {
          }

        }
        var nodeview = new vis.DataView(nodes, {
          fields:['id', 'label', 'x', 'y']
        });
        var newNodes = []
        nodeview.forEach(node => {
          var positions = network.getPosition(node.id);
          node.x = positions.x;
          node.y = positions.y;
          alert(node.id)
          alert(node.label)
          if (deleted.length > 0 && deleted[0] < node.id){
            node.id = node.id - 1;
          }
          if (node.id == (newNodes.length)){
            newNodes.push(node);
          }
          else{
            newNodes[node.id].label = node.label;            
          }
        });


        var edgeview = new vis.DataView(edges, {
          fields:['to', 'from', 'value']
        });

        edgeview.forEach(edge => {
          if (deleted.length > 0){
            if (deleted[0] < Number(edge.from)){
              edge.from = Number(edge.from) - 1;
            }
            if (deleted[0] < Number(edge.to)){
              edge.to = Number(edge.to) - 1;
            }
          }
        });

        var types = [];
        for (var i of nodeType1) {         
          if (deleted[0] < i){
            types.push(i - 1);
          }    
          else if (deleted[0] != i){
            types.push(i);
          }
        }

        nodeType1 = types;
        types = [];

        for (var i of nodeType2) {
          if (deleted[0] < i){
            types.push(i - 1);
          }
          else if (deleted[0] != i){
            types.push(i);
          }
        }

        nodeType2 = types;
        graphName = document.getElementById("graph-name").value
        var graphs = { name: graphName, coordinates: true, nodes: newNodes, edges: edgeview.get(), nodeType1: nodeType1, nodeType2: nodeType2};

        // Send the request to send-ajax-data.php
        xhr.send(JSON.stringify(graphs));
        if (deleted.length >0){
          deleted = [];
          fetchGraph(graphName);
        }
      }

      function downloadGraph() {
        var nodeview = new vis.DataView(nodes, {
          fields:['id', 'label', 'x', 'y']
        });
        
        nodeview.forEach(node => {
          var positions = network.getPosition(node.id);
          node.x = positions.x;
          node.y = positions.y;
        });

        var edgeview = new vis.DataView(edges, {
          fields:['to', 'from', 'value']
        });
        graphName = document.getElementById("graph-name").value
        fileText = "BEG_000\n1 " + nodes.length +"\nEND_000\n\n";

        fileText += "BEG_200\n";
        nodeview.forEach(node => {
          fileText+= node.id + " " + node.x + " " + node.y + "\n"
        });
        fileText += "END_200\n\n";


        fileText += "BEG_001\n";
        edgeview.forEach(edge => {
          fileText+= edge.to + " " + edge.from + " " + edge.value + " 10\n"
        });
        fileText += "END_001\n\n";

        fileText += "BEG_002\n";
        nodeType1.forEach(node => {
          fileText+= node +"\n"
        });
        fileText += "END_002\n\n";

        fileText += "BEG_003\n";
        nodeType2.forEach(node => {
          fileText+= node +"\n"
        });
        fileText += "END_002\n\n";

        fileText += "END_101\n";

        const a = document.createElement('a');
        const file = new Blob([fileText], {type: 'text/plain'});
        a.href= URL.createObjectURL(file);
        a. download = graphName;
        a.click();
        URL.revokeObjectURL(a.href);

      }

      function search(){
        fetchGraph(document.getElementById("searchbar").value);
      }
  
      function fetchGraph(graphName){
        // Initialize a POST Ajax request
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "search", true);
        xhr.setRequestHeader("Content-type", "application/json");
        var name = graphName;

        xhr.onreadystatechange = function(){
          var elem = document.getElementById("Response");                

          if (this.readyState == 4 && this.status == 200) {          
            var response = JSON.parse(this.responseText);         
 
            graphName = response.name          
            document.getElementById("graph-name").value = graphName;          
            coordinates = response.coordinates;          
            nodes = [];          
            for (var i of response.nodes) {          
              if (coordinates == true){          
                nodes.push(i);          
              }          
              else{          
                nodes.push({id: i.id, label: i.label});          
              }          
            }

            count = nodes.length;

            //nodes = response.nodes;
            edges = response.edges;
            nodeType1 = response.nodeType1;
            nodeType2 = response.nodeType2;

            for (var i of nodeType1) {            
              nodes[i].color = "#FF0000";      
              nodes[i].shape = "hexagon";     
              nodes[i].font = "14px arial white"      
            }            
            for (var i of nodeType2) {            
              nodes[i].color = "#FFFFF0";             
              nodes[i].shape = "circularImage";            
              nodes[i].image ="https://cdn.pixabay.com/photo/2018/10/02/15/18/cloud-3719093_1280.png";            
              nodes[i].font = "14px arial white"      
            }            

            nodes = new vis.DataSet(nodes);            
            edges = new vis.DataSet(edges);            
            data = {            
              nodes: nodes,            
              edges: edges,            
            };                        

            network = new vis.Network(container, data, options);            
            network.on("dragEnd", function (params) {            
              if(params.nodes > 0){            
                saveGraph();            
              }            
            });            
            network.stabilize();            
          }          
        }        
        var dat = { name: name};        
        // Send the request to send-ajax-data.php        
        xhr.send(JSON.stringify(dat));        
      }
          
    </script>

    <!-- Latest compiled and minified CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Latest compiled JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
