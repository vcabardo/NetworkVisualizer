<html lang="en">
  <head>
    <title>Network</title>
    <script
      type="text/javascript",
      src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"
    ></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> Document </title>
    <link rel="stylesheet" href="styles/style.css">
    <script src="http://localhost:3000/socket.io/socket.io.js"></script>
  </head>
  <body>
    <%- include("../partials/header.ejs") %>
    <div class="container-fluid">
      <div class="row min-vh-100">
        <div class="col-1 sidebar">
          <%- include("../partials/navbar.ejs") %>
        </div>

        <div class="col-11 content bg-gradient">
          <div class="row">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
              <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
              data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
              aria-expanded="true">
                <span class="navbar-toggler-icon"></span>
              </button>

              <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto">
                  <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="navbarDropdown"
                    role="button" data-bs-toggle="dropdown" aria-haspopup="true"
                    aria-expanded="true">
                      All Graphs
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                      <a class="dropdown-item" href="#">Graph</a>
                      <a class="dropdown-item" href="#">Another graph</a>
                      <div class="dropdown-divider"></div>
                      <a class="dropdown-item" href="#">Something else here</a>
                    </div>
                  </li>
                </ul>
                <form class="form-inline my-2 my-lg-0 flex-row">
                  <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                  <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search Graphs</button>
                </form>
              </div>
            </nav>
          </div>
          <div class="row">
            <div id="mynetwork"></div>
          </div>
        </div>
      </div>
    </div>


    <div id="mynetwork"></div>
    <div id="network-popUp" style="display: none;">
      <span id="operation">Edit Node</span> <br>
      <div id="nodeEdit" style="display: none;">
      <table style="margin: auto">
        <tbody><tr>
          <td>id</td>
          <td><input id="node-id" value="new value"></td>
        </tr>
        <tr>
          <td>label</td>
          <td><input id="node-label" value="new value"></td>
        </tr>
      </tbody></table>
      </div>
      <div id="edgeEdit" style="display: none;">
        <span id="edge-to">To: </span> <br>
        <span id="edge-from">From: </span> <br>
      <table style="margin: auto;">
        <tbody>
        <tr>
          <td>Size Value</td>
          <td><input id="edge-value" value="new value"></td>
        </tr>
      </tbody></table>
    </div>
      <input type="button" value="save" id="saveButton">
      <input type="button" value="cancel" id="cancelButton">
    </div>
    <script type="text/javascript">
      var nodes = []
      var edges =[]
      <% for(var i=0; i<nodes.length; i++) { %>
            nodes.push({id:"<%=nodes[i].id %>", label:"<%=nodes[i].label%>"});
      <%}%>
      <% for(var i=0; i<edges.length; i++) { %>
            edges.push({from:"<%=edges[i].from %>", to:"<%=edges[i].to%>", value:"<%=edges[i].value%>"});
      <%}%>

      // create an array with nodes
      nodes = new vis.DataSet(nodes);

      // create an array with edges
      edges = new vis.DataSet(edges);

      // create a network
      var container = document.getElementById("mynetwork");

      var data = {
        nodes: nodes,
        edges: edges,
      };

      var options = {
        manipulation: {
          addNode: function(nodeData,callback) {
            nodeData.label = 'hello world';
            callback(nodeData);
          },
          editNode: function(nodeData,callback) {
            document.getElementById("operation").innerText = "Edit Node";
            document.getElementById("node-id").value = nodeData.id;
            document.getElementById("node-label").value = nodeData.label;
            document.getElementById("saveButton").onclick = saveNodeData.bind(
              this,
              nodeData,
              callback
            );
            document.getElementById("cancelButton").onclick = cancelEdit.bind(
              this,
              callback
            );
            document.getElementById("network-popUp").style.display = "block";
            document.getElementById("nodeEdit").style.display = "block";
          },
          addEdge: function(edgeData,callback) {
            if (edgeData.from !== edgeData.to) {
              callback(edgeData);
            }
          },
          editEdge: function(edgeData,callback) {
            if (edgeData.from !== edgeData.to) {
            document.getElementById("operation").innerText = "Edit Edge";
            document.getElementById("edge-to").innerText = edgeData.to;
            document.getElementById("edge-from").innerText = edgeData.from;
            document.getElementById("edge-value").value = edgeData.value;
            for (const [key, value] of Object.entries(edgeData)) {
              alert(value);
            }

            document.getElementById("saveButton").onclick = saveEdgeData.bind(
              this,
              edgeData,
              callback
            );
            document.getElementById("cancelButton").onclick = cancelEdit.bind(
              this,
              callback
            );
            document.getElementById("network-popUp").style.display = "block";
            document.getElementById("edgeEdit").style.display = "block";

          }
        }
        }
      };

      var network = new vis.Network(container, data, options);

      function clearPopUp() {
        document.getElementById("saveButton").onclick = null;
        document.getElementById("cancelButton").onclick = null;
        document.getElementById("network-popUp").style.display = "none";
        document.getElementById("nodeEdit").style.display = "none";
        document.getElementById("edgeEdit").style.display = "none";
      }

      function cancelEdit(callback) {
        clearPopUp();
        callback(null);
      }

      function saveNodeData(data, callback) {
        data.id = document.getElementById("node-id").value;
        data.label = document.getElementById("node-label").value;
        clearPopUp();
        callback(data);
      }
      function saveEdgeData(data, callback) {
        data.value = document.getElementById("edge-value").value;
        clearPopUp();
        callback(data);
      }
    </script>

    <script src="scripts/network_logic.js"></script>
    <!-- Latest compiled and minified CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Latest compiled JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
